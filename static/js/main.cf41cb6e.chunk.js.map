{"version":3,"sources":["api/api.ts","constants/constants.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","utils/utils.ts","index.tsx"],"names":["getData","url","fetch","then","response","json","getPreparedTodos","a","todos","users","preparedTodos","map","todo","user","find","id","userId","Todo","title","completed","name","TodoList","key","App","useState","setTodos","isLoading","setIsLoading","sortBy","setSortBy","todosToSort","sortByHandler","event","currentTarget","sort","todoA","todoB","localeCompare","sortTodos","length","className","type","onClick","disabled","todosWithUsers","finally","ReactDOM","render","document","getElementById"],"mappings":"kRAEaA,EAAU,SAAIC,GACzB,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAWlBC,EAAgB,uCAAG,gCAAAC,EAAA,sEAHvBP,ECXgB,8CDcO,cACxBQ,EADwB,gBAPvBR,ECRgB,8CDeO,cAExBS,EAFwB,OAIxBC,EAAgBF,EAAMG,KAAI,SAAAC,GAAI,sBAC/BA,EAD+B,CAElCC,KAAMJ,EAAMK,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,eANd,kBASvBN,GATuB,2CAAH,qDEThBO,EAAwB,SAAC,GAAc,IAAZL,EAAW,EAAXA,KAEpCG,EAIEH,EAJFG,GACAF,EAGED,EAHFC,KACAK,EAEEN,EAFFM,MACAC,EACEP,EADFO,UAGF,OACE,4BACE,4BAAKJ,GACL,4BAAKF,EAAKO,MACV,4BAAKF,GACL,sCAAQC,MCXDE,G,MAA4B,SAAC,GAAe,IAAbb,EAAY,EAAZA,MAC1C,OACE,+BACE,+BACE,4BACE,iCACA,oCACA,qCACA,wCAGJ,+BACGA,EAAMG,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAMU,IAAKV,EAAKG,GAAIH,KAAMA,WCwDrBW,G,MAvEO,WAAO,IAAD,EACAC,mBAAyB,IADzB,mBACnBhB,EADmB,KACZiB,EADY,OAEQD,oBAAkB,GAF1B,mBAEnBE,EAFmB,KAERC,EAFQ,OAGEH,mBAAiB,IAHnB,mBAGnBI,EAHmB,KAGXC,EAHW,KAIpBC,EAAW,YAAOtB,GAWlBuB,EAAgB,SAACC,GACrBH,EAAUG,EAAMC,cAAcb,OAKhC,OC3BuB,SAACZ,EAAuBoB,GAC/C,OAAQA,GACN,IAAK,OACHpB,EAAM0B,MAAK,SAACC,EAAOC,GAAR,OACTD,EAAMtB,KAAKO,KAAKiB,cAAcD,EAAMvB,KAAKO,SAE3C,MAGF,IAAK,QACHZ,EAAM0B,MAAK,SAACC,EAAOC,GAAR,OACTD,EAAMjB,MAAMmB,cAAcD,EAAMlB,UAElC,MAGF,IAAK,YACHV,EAAM0B,MAAK,SAACC,EAAOC,GAAR,OAAoBD,EAAMhB,WAAaiB,EAAMjB,cDQ5DmB,CAAUR,EAAaF,GAElBpB,EAAM+B,OAgBT,yBAAKC,UAAU,OACb,qDACA,2BACE,yCACChC,EAAM+B,QAET,yBAAKC,UAAU,oBACb,4BACEpB,KAAK,QACLqB,KAAK,SACLC,QAASX,GAHX,iBAOA,4BACEX,KAAK,OACLqB,KAAK,SACLC,QAASX,GAHX,gBAOA,4BACEX,KAAK,YACLqB,KAAK,SACLC,QAASX,GAHX,sBAQF,kBAAC,EAAD,CAAUvB,MAAOsB,KA3CjB,yBAAKU,UAAU,oBACb,qDACA,4BACEC,KAAK,SACLE,SAAUjB,EACVgB,QAtBY,WAClBf,GAAa,GACbrB,IAAmBH,MAAK,SAAAyC,GACtBnB,EAASmB,MACRC,SAAQ,WACTlB,GAAa,QAmBRD,EAAY,aAAe,iBEhCtCoB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.cf41cb6e.chunk.js","sourcesContent":["import { USERS_URL, TODOS_URL } from '../constants/constants';\n\nexport const getData = <T>(url: string): Promise<T> => {\n  return fetch(url)\n    .then(response => response.json());\n};\n\nconst getUsers = (usersUrl: string): Promise<User[]> => {\n  return getData(usersUrl);\n};\n\nconst getTodos = (todosUrl: string): Promise<Todo[]> => {\n  return getData(todosUrl);\n};\n\nexport const getPreparedTodos = async (): Promise<TodoWithUser[]> => {\n  const todos = await getTodos(TODOS_URL);\n  const users = await getUsers(USERS_URL);\n\n  const preparedTodos = todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) as User,\n  }));\n\n  return preparedTodos;\n};\n","export const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\n","import React from 'react';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const Todo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    user,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <tr>\n      <td>{id}</td>\n      <td>{user.name}</td>\n      <td>{title}</td>\n      <td>{`${completed}`}</td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../Todo/Todo';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Name</th>\n          <th>Title</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <Todo key={todo.id} todo={todo} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useState, MouseEvent } from 'react';\nimport { getPreparedTodos } from './api/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { sortTodos } from './utils/utils';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [sortBy, setSortBy] = useState<string>('');\n  const todosToSort = [...todos];\n\n  const loadHandler = () => {\n    setIsLoading(true);\n    getPreparedTodos().then(todosWithUsers => {\n      setTodos(todosWithUsers);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  const sortByHandler = (event: MouseEvent<HTMLButtonElement>) => {\n    setSortBy(event.currentTarget.name);\n  };\n\n  sortTodos(todosToSort, sortBy);\n\n  if (!todos.length) {\n    return (\n      <div className=\"button-container\">\n        <h1>Dynamic list of TODOs</h1>\n        <button\n          type=\"button\"\n          disabled={isLoading}\n          onClick={loadHandler}\n        >\n          {isLoading ? 'Loading...' : 'Load Todos'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of TODOs</h1>\n      <p>\n        <span>Todos: </span>\n        {todos.length}\n      </p>\n      <div className=\"button-container\">\n        <button\n          name=\"title\"\n          type=\"button\"\n          onClick={sortByHandler}\n        >\n          Sort by title\n        </button>\n        <button\n          name=\"name\"\n          type=\"button\"\n          onClick={sortByHandler}\n        >\n          Sort by name\n        </button>\n        <button\n          name=\"completed\"\n          type=\"button\"\n          onClick={sortByHandler}\n        >\n          Sort by completed\n        </button>\n      </div>\n      <TodoList todos={todosToSort} />\n    </div>\n  );\n};\n\nexport default App;\n","export const sortTodos = (todos: TodoWithUser[], sortBy: string) => {\n  switch (sortBy) {\n    case 'name': {\n      todos.sort((todoA, todoB) => (\n        todoA.user.name.localeCompare(todoB.user.name)\n      ));\n      break;\n    }\n\n    case 'title': {\n      todos.sort((todoA, todoB) => (\n        todoA.title.localeCompare(todoB.title)\n      ));\n      break;\n    }\n\n    case 'completed': {\n      todos.sort((todoA, todoB) => (+todoA.completed - +todoB.completed));\n      break;\n    }\n\n    default: break;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}